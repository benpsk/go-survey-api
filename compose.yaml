# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: app
      target: final
    environment:
      - ENV=${ENV:-PRODUCTION}
      - DATABASE_URL=${DATABASE_URL}
      - PORT=${PORT}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.

  db:
    image: postgres
    restart: unless-stopped
    user: ${DB_USER:-postgres}
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME:-go_db}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    ports:
      - "127.0.0.1:5431:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  proxy:
    image: nginx
    volumes:
      - type: bind
        source: ./proxy/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      - server

volumes:
  db-data:

